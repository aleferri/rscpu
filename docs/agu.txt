AGU(ar, pc, is_rel_op, is_rel_uc, ea_uop):
  rel = ea_uop ? is_rel_op : is_rel_uc;
  ARG = ar masked (10 bit or 16 bit)
  ADR <- (PC masked rel) + (ADR masked is_pc)
  
module agu(
    input   wire        clk,
    input   wire        a_rst,
    input   wire        uop_ea,
    input   wire        uop_set_rel,
    input   wire        restore,
    input   wire        adr_inc,
    input   wire        ir_rel,
    
    input   wire[15:0]  ar,
    
    output  wire[15:0]  adr,
);

wire is_rel = uop_ea ? ir_rel : uop_set_rel;

function wire[15:0] mask(wire[15:0] v, wire m);
    integer i;
    for (i = 0; i < 16; i++) begin
        v[i] = v[i] & m;
    end
endfunction

reg [15:0] pc;
reg [15:0] adr;

always @(posedge clk or negedge a_rst) begin
    if ( ~a_rst ) begin
        adr <= 0;
        pc <= 16'h1000;
    end else begin
        adr <= mask(pc, 16, is_rel) + mask(ar, 16, uop_out_pc) + adr_inc;
    end
end