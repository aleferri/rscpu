Modified Very Simple CPU is a teaching architecture to explain CPU implementation.
I don't remember the book, if you know the book or are the author (in the same book you described the Relative Simple CPU) tell me the title
and your name, and i will gladly cite you in the credits. Thank you.

The architecture is a 16 bit one with 8 instruction. The main register is 16 bit wide

The visible register set is made by two registers: PC (the instruction pointer) and AC (the accumulator)
 

Full Register Set (Visible + Hidden)

PC - 16 bit  -- Visible, Program Counter
AC - 16 bit  -- ACcumulator register
DR - 16 bit  -- Data Register, contains the read data
TR - 16 bit  -- Temp Register, contains AC at the beginning of each instruction
AR - 16 bit  -- Address Register, output to the memory
IR - 04 bit  -- Instruction Register, contains the 2 bit opcode 

Encoding

The encoding is composed of 4 bit opcode and 12 bit address/literal.

Instructions

[ Legend ] 
    @ : address
    <- : assign
    , : parallel (e.g. IR <- X, AR <- Y means that both IR and AR get updated in the same clock cycle)
    ; : await next clock
    + : binary add
    - : binary sub
    & : binary and

ADD @ : 0000 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]
    DR <- MEM[AR]; 
    AC <- AC + DR; TR <- AC + DR
    
SUB @ : 0001 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC];
    DR <- MEM[AR];
    AC <- AC - DR; TR <- AC - DR

AND @ : 0010 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]
    DR <- MEM[AR]; 
    AC <- AC & DR; TR <- AC & DR
    
NOR @ : 0011 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    DR <- MEM[AR]; 
    AC <- AC nor DR; TR <- AC nor DR
    
<!-- 
ADI # : 0100 immediate( 12 bit )

    IR <- MEM[PC], DR[11:0] <- MEM[PC], AR <- MEM[PC];
    AC <- AC + DR; TR <- AC nor DR
-->
    
INC @ : 0110 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    DR <- MEM[AR]; 
    TR <- DR + 1;
    MEM[AR] <- TR;
    
SHR @ : 0111 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC];
    DR <- MEM[AR];
    TR <- DR >> 1;
    MEM[AR] <- TR;

JMP @ : 1000 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    PC <- AR;

JZE @ : 1010 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    PC <- AR IF AC == 0;

LIT @ : 1100 literal( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    DR <- MEM[AR];
    AC <- DR, TR <- DR;
	
LDI @ : 1101 literal( 12 bit )

	IR <- MEM[PC], AR <- MEM[PC];
    AR <- MEM[AR];
    AC <- MEM[AR]; TR <- MEM[AR];

STA @ : 1110 address( 12 bit )

    IR <- MEM[PC], AR <- MEM[PC]; 
    MEM[AR] <- TR;
	
STI @ : 1111 address( 12 bit )

	IR <- MEM[PC], AR <- MEM[PC]; 
    AR <- MEM[AR];
	MEM[AR] <- TR;

Shared BUS

BUS_0 := connect( AR(read), DR(read), IR(read), MEM_D_IN(write) );                      BUS_0 has only one writer (MEM_D_IN)
BUS_1 := connect( PC(read), PC(write), AR(write), MEM_ADR(read), 0x100(write) );        BUS_1 has three writers (AR, PC, 0x0100), and two reader (PC & MEM_ADR)
BUS_2 := connect( TR(read), AC(read/write), ALU(write), AR(write), DR_URY(write) );     BUS_2 has four writers (ALU, AC, AR, DR_URY) and two readers (TR & AC)


Signals

AR_RB0          AR <- BUS_0
DR_RB0          DR <- BUS_0
IR_RB0          IR <- BUS_0
PC_RB1          PC <- BUS_1
PC_WB1          PC -> BUS_1
AR_WB1          AR -> BUS_1
TR_RB2          TR <- BUS_2
AC_RB2          AC <- BUS_2
FN_WB2          FN -> BUS_2     ( ALU binary operations )
AR_WB2          AR -> BUS_2
UN_WB2          UN -> BUS_2     ( Unary operations )
ALU_MUX         ALU <- select( AC + DR, AC & DR, AC nor DR )
W_MEM           MEM[ MEM_ADR ] <- TR
PC_INC          PC <- PC + 1


Registers Signals:


IR signals:
IR_LOAD_0

AR signals:
AR_LOAD_0
AR_OUTP_1
AR_OUTP_2

DR signals:
DR_LOAD_0

PC signals:
PC_LOAD_1
PC_OUTP_1
PC_INC

TR signals:
TR_LOAD_2

AC signals:
AC_LOAD_2
AC_OUTP_2

FN signals:
FN_OUTP_2
FN_MUX

UN signals:
UN_OUTP_2



Direct links

AC          -> ALU_PORT_0
DR          -> ALU_PORT_1
TR          -> MEM_D_OUT
IR[1:0]     -> ALU_SELECT



Microcontrol States

INIT0: PC_WB1;
INIT1 : PC_WB1, ~AR_WB1;    // PUT OUT PC
INIT2 : FETCH_AR; FETCH_IR; // FETCH OP
ADD0 : ~PC_WB1, AR_WB1, PC_INC;
ADD1 : DR_RB0, PC_WB1;
ADD2 : AC_RB2, TR_RB2, FN_WB2, FETCH, GOTO_3;
AND0 : ~PC_WB1, AR_WB1, PC_INC;
AND1 : DR_RB0, PC_WB1;
AND2 : AC_RB2, TR_RB2, FN_WB2, FETCH, GOTO_3;
NOR0 : ~PC_WB1, AR_WB1, PC_INC;
NOR1 : DR_RB0, PC_WB1;
NOR2 : AC_RB2, TR_RB2, FN_WB2, FETCH, GOTO_3;
INC0 : ~PC_WB1, AR_WB1, PC_INC;
INC1 : DR_RB0;
INC2 : DR_WB2, TR_RB2;
INC3 : W_MEM, AC_WB2, TR_RB2, GOTO_1;
JMP0 : ~PC_WB1, AR_WB1, PC_INC;
JMP1 : PC_RB1, GOTO_1;;
JZE0 : ~PC_WB1, AR_WB1, PC_INC;
JZE1 : PC_RB1 & TR_IS_Z, GOTO_1;
LIT0 : ~PC_WB1, AR_WB1, PC_INC;
LIT1 : AC_RB2, TR_RB2, AR_WB2, PC_WB1, GOTO_2;
STA0 : ~PC_WB1, AR_WB1, PC_INC;
STA1 : W_MEM, GOTO_1;
LDI0 : ~PC_WB1, AR_WB1, PC_INC;
LDI1 : FETCH_AR, ~PC_WB1, AR_WB1;
LDI2 : AC_RB2, TR_RB2, AR_WB2, PC_WB1, GOTO_2;
STI0 : ~PC_WB1, AR_WB1, PC_INC;
STI1 : FETCH_AR, ~PC_WB1, AR_WB1;
STI2 : W_MEM, GOTO_1;



States Reduction

ADD0 = AND0 = NOR0 = INC0 = JMP0 = JZO0 = LIT0 = STA0 = LDI0 = STI0 -> READY
ADD1 = AND1 = NOR1 -> ALU1
ADD2 = AND2 = NOR2 -> ALU2

INIT0 : LD_PC #0100;        // INIT PC
INIT1 : PC_WB1, ~AR_WB1;    // PUT OUT PC
INIT2 : FETCH_IR, FETCH_AR; // FETCH OP
READY : ~PC_WB1, AR_WB1, PC_INC;
{
    ALU1: DR_RB0, PC_WB1;
    ALU2: AC_RB2, TR_RB2, FN_WB2, FETCH, BP_CLR, GOTO_3;
    INC1: DR_RB0;
    INC2: DR_WB2, TR_RB2;
    INC3: W_MEM, AC_WB2, TR_RB2, BP_CLR, GOTO_1;
    JMP1: PC_RB1, BP_CLR, GOTO_1;
    JZE1: PC_RB1 & TR_IS_Z, BP_CLR, GOTO_1;
    LIT1: AC_RB2, TR_RB2, AR_WB2, PC_WB1, BP_CLR, GOTO_2;
    STA1: W_MEM, BP_CLR, GOTO_1;
    LDI1: FETCH_AR, ~PC_WB1, AR_WB1;
	LDI2: AC_RB2, TR_RB2, AR_WB2, PC_WB1, GOTO_2;
	STI1: FETCH_AR, ~PC_WB1, AR_WB1;
	STI2: W_MEM, GOTO_1;
}

Microcode (16 bit):
goto(0: inc, 1: next = 0001, 2: next = 0010, 3: next = 0011) | fetch_ir(1) | fetch_ar(1) || dr_rd0 | ar_wb1 | w_mem | pc_wb1 || pc_inc | pc_rd1 | tr_rd2 | ac_rd2 || bus2_wr(2) | z_on | reserveds(1)

States Encoding

INIT0   = 00000		-> 0
INIT1   = 00001		-> 1
INIT2   = 00010		-> 2
READY   = 00011		-> 3
JMP1    = 00100		-> 4
JZE1    = 00101		-> 5
STA1    = 00110		-> 6
STA2    = 00111     -> 7
INC1    = 01000		-> 8
INC2    = 01001		-> 9
INC3    = 01010		-> A
INC4    = 01011     -> B
LIT1    = 01100		-> C
ALU1    = 01101		-> D
ALU2    = 01110		-> E
LDI1    = 10000		-> 10
LDI2    = 10001		-> 11
STI1    = 10100		-> 14
STI2    = 10101		-> 15
STI3    = 10110     -> 16


Opcodes to Microcontrol States
0000  -> 01101   =   0  -> D
0001  -> 01101   =   1  -> D
0010  -> 01101   =   2  -> D
0011  -> 01101   =   3  -> D
0100  -> 01000   =   4  -> 8
1000  -> 00100   =   8  -> 4
1010  -> 00101   =   A  -> 5
1100  -> 00111   =   C  -> C
1101  -> 10000   =   D  -> 10
1110  -> 00110   =   E  -> 6
1111  -> 10010   =   F  -> 14


Microcontrol Signals

load_constant (uState = 0000)
dispatch_uop  (uState = 0011)
load_pc = pc_rd1 & (tr_is_z | z_on)

FIELD : 16_SGN_CNTRL
        / goto(2) | fetch(1) | dr_rd0 || ar_wb1 | w_mem | pc_wb1 | pc_inc || pc_rd1 | tr_rd2 | ac_rd2 | z_on || bus2_wr(2) | res(2)
INIT0   0               0       0          0        0       0       0        1         0        0         0         ac          0       =   0000 || 0000 || 1000 || 0100    =   0084
INIT1   0               0       0          0        0       1       0        0         0        0         0         ac          0       =   0000 || 0010 || 0000 || 0100    =   0204
INIT2   0               1       0          0        0       1       0        0         0        0         0         ac          2       =   0010 || 0010 || 0000 || 0110    =   2206
READY   0               0       0          1        0       0       1        0         1        0         0         ac          0       =   0000 || 1001 || 0100 || 0100    =   0944
JMP1    1               0       0          1        0       0       0        1         0        0         0         ac          0       =   0100 || 1000 || 1001 || 0100    =   4884
JZE1    1               0       0          1        0       0       0        1         0        0         0         ac          0       =   0100 || 1000 || 1000 || 0100    =   4884
STA1    0               0       0          1        1       0       0        0         0        0         0         ac          0       =   0000 || 1100 || 0000 || 0100    =   0C04
STA2    1               0       0          1        0       0       0        0         0        0         0         ac          0       =   0100 || 1000 || 0000 || 0100    =   4804       
INC1    0               0       1          1        0       0       0        0         0        0         0         dr          0       =   0001 || 1000 || 0000 || 0000    =   1800
INC2    0               0       0          1        0       0       0        0         1        0         0         dr          0       =   0000 || 1000 || 0100 || 0000    =   0840
INC3    0               0       0          1        1       0       0        0         0        0         0         ac          0       =   0000 || 1100 || 0000 || 0100    =   0C04
INC4    1               0       0          1        0       0       0        0         1        0         0         ac          0       =   0100 || 1000 || 0100 || 0100    =   4844
LIT1    2               0       0          0        0       1       0        0         1        1         0         ar          0       =   1000 || 0010 || 0110 || 1100    =   826C
ALU1    0               0       1          1        0       0       0        0         0        0         0         fn          0       =   0001 || 1010 || 0000 || 1000    =   1808
ALU2    3               1       0          0        0       1       0        0         1        1         0         fn          2       =   1110 || 0010 || 0110 || 1010    =   E26A
LDI1    0               0       0     ||   1        0       0       0    ||  0         0        0         0  ||     fn          2       =   0000 || 1000 || 0000 || 1010    =   080A
LDI2    2               0       0          0        0       1       0        0         1        1         0         ar          0       =   1000 || 0010 || 0110 || 1110    =   826E
STI1    0               0       0          1        0       0       0        0         0        0         0         fn          2       =   0000 || 1000 || 0000 || 1010    =   080A
STI2    0               0       0          1        1       0       0        0         0        0         0         fn          0       =   0000 || 1100 || 0000 || 1000    =   0C08
STI3    1               0       0          1        0       0       0        0         0        0         0         fn          0       =   0100 || 1000 || 0000 || 1000    =   4808