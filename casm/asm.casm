
.num 16 "0x" ""
.num 2 "0b" ""

.inline OPC_HIGH
.with ( opc: Ints, addr12: Ints ) -> {
    .if addr12 >= 8192 {
        .error addr12, "Cannot branch outside the first 4096 positions";
    }
    .return opc + ( ( addr12 >> 9 ) & 0x0F );
}

.inline OPC_LOW
.with ( addr12: Ints ) -> {
    .if addr12 >= 8192 {
        .error addr12, "Cannot branch outside the first 4096 positions";
    }
    .return ( addr12 >> 1 ) & 0xFF;
}


.opcode JMP {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x80, adr12), .expr OPC_LOW(addr12) ];
}

.opcode JZE {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0xA0, adr12), .expr OPC_LOW(addr12) ];
}

.opcode LIT {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0xC0, adr12), .expr OPC_LOW(addr12) ];
}

.opcode LDI {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0xD0, adr12 << 1), .expr OPC_LOW(addr12 << 1) ];
}

.opcode STA {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0xE0, adr12), .expr OPC_LOW(addr12) ];
}

.opcode STI {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0xF0, adr12), .expr OPC_LOW(addr12) ];
}

// Unary ALU
.opcode INC {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x40, adr12), .expr OPC_LOW(addr12) ];
}

// Binary ALU
.opcode ADD {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x00, adr12), .expr OPC_LOW(addr12) ];
}

.opcode SUB {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x10, adr12), .expr OPC_LOW(addr12) ];
}

.opcode AND {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x20, adr12), .expr OPC_LOW(addr12) ];
}

.opcode NOR {{ addr12 }}
.with ( addr12 : Ints ) -> {
    .outr [ .expr OPC_HIGH(0x30, adr12), .expr OPC_LOW(addr12) ];
}